generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aluno {
  id                 Int                @id @default(autoincrement())
  nome               String             @db.VarChar(255)
  email              String             @db.VarChar(255)
  matricula          String             @db.VarChar(100)
  nivel_instrucao    String             @db.VarChar(50)
  instituicao_id     Int
  data_cadastro      DateTime           @default(now()) @db.Timestamp(0)
  instituicao_ensino instituicao_ensino @relation(fields: [instituicao_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_aluno_instituicao")
  avaliacao          avaliacao[]

  @@index([instituicao_id], map: "idx_aluno_instituicao")
}

model avaliacao {
  id             Int      @id @default(autoincrement())
  aluno_id       Int
  projeto_id     Int
  nota           Decimal  @db.Decimal(5, 2)
  feedback       String?  @db.Text
  avaliador_nome String?  @db.VarChar(255)
  data_avaliacao DateTime @default(now()) @db.Timestamp(0)
  aluno          aluno    @relation(fields: [aluno_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_avaliacao_aluno")
  projeto        projeto  @relation(fields: [projeto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_avaliacao_projeto")

  @@index([aluno_id], map: "idx_avaliacao_aluno")
  @@index([projeto_id], map: "idx_avaliacao_projeto")
}

model empresa {
  id            Int       @id @default(autoincrement())
  nome          String    @db.VarChar(255)
  cnpj          String    @db.VarChar(18)
  setor         String    @db.VarChar(100)
  contato_nome  String    @db.VarChar(255)
  contato_email String    @db.VarChar(255)
  telefone      String?   @db.VarChar(20)
  site          String?   @db.VarChar(255)
  projeto       projeto[]
}

model instituicao_ensino {
  id            Int       @id @default(autoincrement())
  nome          String    @db.VarChar(255)
  sigla         String?   @db.VarChar(50)
  tipo          String    @db.VarChar(50)
  endereco      String?   @db.VarChar(500)
  contato_nome  String    @db.VarChar(255)
  contato_email String    @db.VarChar(255)
  telefone      String?   @db.VarChar(20)
  site          String?   @db.VarChar(255)
  aluno         aluno[]
  projeto       projeto[]
}

model projeto {
  id                 Int                @id @default(autoincrement())
  titulo             String             @db.VarChar(255)
  descricao          String?            @db.Text
  nivel_dificuldade  String             @db.VarChar(50)
  empresa_id         Int
  instituicao_id     Int
  data_criacao       DateTime           @default(now()) @db.Timestamp(0)
  avaliacao          avaliacao[]
  empresa            empresa            @relation(fields: [empresa_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projeto_empresa")
  instituicao_ensino instituicao_ensino @relation(fields: [instituicao_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projeto_instituicao")

  @@index([empresa_id], map: "idx_projeto_empresa")
  @@index([instituicao_id], map: "idx_projeto_instituicao")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Account_user_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_unique")
  @@index([userId], map: "Account_userId_index")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique(map: "Session_sessionToken_unique") @db.VarChar(255)
  userId       Int
  expires      DateTime @db.DateTime(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Session_user_fkey")

  @@index([userId], map: "Session_userId_index")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String    @unique(map: "User_email_unique") @db.VarChar(255)
  password      String?   @db.VarChar(255)
  role          User_role @default(empresa)
  emailVerified DateTime? @db.DateTime(0)
  image         String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @db.DateTime(0)
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique(map: "VerificationToken_token_unique") @db.VarChar(255)
  expires    DateTime @db.DateTime(0)

  @@id([identifier, token])
}

enum User_role {
  empresa
  adm_instituicao
  docente_instituicao
}
